
uart_demo_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001cd0  08001cd0  00011cd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001d0c  08001d0c  00011d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001d14  08001d14  00011d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001d18  08001d18  00011d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000174  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000180  20000180  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013bc3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000027c7  00000000  00000000  00033bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006436  00000000  00000000  000363c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000930  00000000  00000000  0003c800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  0003d130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000050a3  00000000  00000000  0003dc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003aba  00000000  00000000  00042d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000467cd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001a54  00000000  00000000  0004684c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001cb8 	.word	0x08001cb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001cb8 	.word	0x08001cb8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f894 	bl	800061c <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f84a 	bl	800059c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f81b 	bl	8000578 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f001 fa4e 	bl	80019e8 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800057a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000580:	041b      	lsls	r3, r3, #16
 8000582:	0c1b      	lsrs	r3, r3, #16
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000588:	0200      	lsls	r0, r0, #8
 800058a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000592:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000594:	60d3      	str	r3, [r2, #12]
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	68dc      	ldr	r4, [r3, #12]
 80005a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	bf28      	it	cs
 80005b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	f04f 0501 	mov.w	r5, #1
 80005b8:	fa05 f303 	lsl.w	r3, r5, r3
 80005bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c0:	bf8c      	ite	hi
 80005c2:	3c03      	subhi	r4, #3
 80005c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c6:	4019      	ands	r1, r3
 80005c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ca:	fa05 f404 	lsl.w	r4, r5, r4
 80005ce:	3c01      	subs	r4, #1
 80005d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	ea42 0201 	orr.w	r2, r2, r1
 80005d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	bfaf      	iteee	ge
 80005de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	f000 000f 	andlt.w	r0, r0, #15
 80005e6:	4b06      	ldrlt	r3, [pc, #24]	; (8000600 <HAL_NVIC_SetPriority+0x64>)
 80005e8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	bfa5      	ittet	ge
 80005ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00
 8000600:	e000ed14 	.word	0xe000ed14

08000604 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000604:	0942      	lsrs	r2, r0, #5
 8000606:	2301      	movs	r3, #1
 8000608:	f000 001f 	and.w	r0, r0, #31
 800060c:	fa03 f000 	lsl.w	r0, r3, r0
 8000610:	4b01      	ldr	r3, [pc, #4]	; (8000618 <HAL_NVIC_EnableIRQ+0x14>)
 8000612:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000616:	4770      	bx	lr
 8000618:	e000e100 	.word	0xe000e100

0800061c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800061c:	3801      	subs	r0, #1
 800061e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000622:	d20a      	bcs.n	800063a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	4a07      	ldr	r2, [pc, #28]	; (8000644 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000628:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	21f0      	movs	r1, #240	; 0xf0
 800062c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000630:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000632:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000634:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800063a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000e010 	.word	0xe000e010
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000648:	0943      	lsrs	r3, r0, #5
 800064a:	2201      	movs	r2, #1
 800064c:	f000 001f 	and.w	r0, r0, #31
 8000650:	fa02 f000 	lsl.w	r0, r2, r0
 8000654:	3360      	adds	r3, #96	; 0x60
 8000656:	4a02      	ldr	r2, [pc, #8]	; (8000660 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8000658:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000e100 	.word	0xe000e100

08000664 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000666:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000668:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800066a:	bf0c      	ite	eq
 800066c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000670:	f022 0204 	bicne.w	r2, r2, #4
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	4770      	bx	lr
 8000678:	e000e010 	.word	0xe000e010

0800067c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800067c:	4770      	bx	lr

0800067e <HAL_SYSTICK_IRQHandler>:
{
 800067e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000680:	f7ff fffc 	bl	800067c <HAL_SYSTICK_Callback>
 8000684:	bd08      	pop	{r3, pc}

08000686 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000686:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800068a:	2b02      	cmp	r3, #2
 800068c:	d003      	beq.n	8000696 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000692:	2001      	movs	r0, #1
 8000694:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000696:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000698:	2305      	movs	r3, #5
 800069a:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800069e:	6813      	ldr	r3, [r2, #0]
 80006a0:	f023 0301 	bic.w	r3, r3, #1
 80006a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80006a6:	2000      	movs	r0, #0
}
 80006a8:	4770      	bx	lr
	...

080006ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006b0:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000864 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006b8:	4a68      	ldr	r2, [pc, #416]	; (800085c <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ba:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000868 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006be:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006c0:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006c2:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006c6:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006c8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006cc:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006d0:	45b6      	cmp	lr, r6
 80006d2:	f040 80ae 	bne.w	8000832 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006d6:	684c      	ldr	r4, [r1, #4]
 80006d8:	f024 0710 	bic.w	r7, r4, #16
 80006dc:	2f02      	cmp	r7, #2
 80006de:	d116      	bne.n	800070e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80006e0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80006e4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006e8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80006ec:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006f0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80006f4:	f04f 0c0f 	mov.w	ip, #15
 80006f8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80006fc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000700:	690d      	ldr	r5, [r1, #16]
 8000702:	fa05 f50b 	lsl.w	r5, r5, fp
 8000706:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800070a:	f8ca 5020 	str.w	r5, [sl, #32]
 800070e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000712:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000714:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000718:	fa05 f50a 	lsl.w	r5, r5, sl
 800071c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800071e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000722:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000726:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800072a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800072c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000730:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000732:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000736:	d811      	bhi.n	800075c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000738:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800073a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800073e:	68cf      	ldr	r7, [r1, #12]
 8000740:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000744:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000748:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800074a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800074c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000750:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000754:	409f      	lsls	r7, r3
 8000756:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800075a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800075c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800075e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000760:	688f      	ldr	r7, [r1, #8]
 8000762:	fa07 f70a 	lsl.w	r7, r7, sl
 8000766:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000768:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800076a:	00e5      	lsls	r5, r4, #3
 800076c:	d561      	bpl.n	8000832 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	f04f 0b00 	mov.w	fp, #0
 8000772:	f8cd b00c 	str.w	fp, [sp, #12]
 8000776:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800077a:	4d39      	ldr	r5, [pc, #228]	; (8000860 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000780:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000784:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000788:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800078c:	9703      	str	r7, [sp, #12]
 800078e:	9f03      	ldr	r7, [sp, #12]
 8000790:	f023 0703 	bic.w	r7, r3, #3
 8000794:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000798:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800079c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007a0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007a4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007a8:	f04f 0e0f 	mov.w	lr, #15
 80007ac:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007b2:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007b6:	d043      	beq.n	8000840 <HAL_GPIO_Init+0x194>
 80007b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007bc:	42a8      	cmp	r0, r5
 80007be:	d041      	beq.n	8000844 <HAL_GPIO_Init+0x198>
 80007c0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007c4:	42a8      	cmp	r0, r5
 80007c6:	d03f      	beq.n	8000848 <HAL_GPIO_Init+0x19c>
 80007c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007cc:	42a8      	cmp	r0, r5
 80007ce:	d03d      	beq.n	800084c <HAL_GPIO_Init+0x1a0>
 80007d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007d4:	42a8      	cmp	r0, r5
 80007d6:	d03b      	beq.n	8000850 <HAL_GPIO_Init+0x1a4>
 80007d8:	4548      	cmp	r0, r9
 80007da:	d03b      	beq.n	8000854 <HAL_GPIO_Init+0x1a8>
 80007dc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80007e0:	42a8      	cmp	r0, r5
 80007e2:	d039      	beq.n	8000858 <HAL_GPIO_Init+0x1ac>
 80007e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e8:	42a8      	cmp	r0, r5
 80007ea:	bf14      	ite	ne
 80007ec:	2508      	movne	r5, #8
 80007ee:	2507      	moveq	r5, #7
 80007f0:	fa05 f50c 	lsl.w	r5, r5, ip
 80007f4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007f8:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80007fa:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007fc:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007fe:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000802:	bf0c      	ite	eq
 8000804:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000806:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000808:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800080a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800080c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000810:	bf0c      	ite	eq
 8000812:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000814:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000816:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000818:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800081a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800081e:	bf0c      	ite	eq
 8000820:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000822:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000824:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000826:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000828:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800082a:	bf54      	ite	pl
 800082c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800082e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000830:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000832:	3301      	adds	r3, #1
 8000834:	2b10      	cmp	r3, #16
 8000836:	f47f af44 	bne.w	80006c2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800083a:	b005      	add	sp, #20
 800083c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000840:	465d      	mov	r5, fp
 8000842:	e7d5      	b.n	80007f0 <HAL_GPIO_Init+0x144>
 8000844:	2501      	movs	r5, #1
 8000846:	e7d3      	b.n	80007f0 <HAL_GPIO_Init+0x144>
 8000848:	2502      	movs	r5, #2
 800084a:	e7d1      	b.n	80007f0 <HAL_GPIO_Init+0x144>
 800084c:	2503      	movs	r5, #3
 800084e:	e7cf      	b.n	80007f0 <HAL_GPIO_Init+0x144>
 8000850:	2504      	movs	r5, #4
 8000852:	e7cd      	b.n	80007f0 <HAL_GPIO_Init+0x144>
 8000854:	2505      	movs	r5, #5
 8000856:	e7cb      	b.n	80007f0 <HAL_GPIO_Init+0x144>
 8000858:	2506      	movs	r5, #6
 800085a:	e7c9      	b.n	80007f0 <HAL_GPIO_Init+0x144>
 800085c:	40013c00 	.word	0x40013c00
 8000860:	40020000 	.word	0x40020000
 8000864:	40023800 	.word	0x40023800
 8000868:	40021400 	.word	0x40021400

0800086c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800086c:	6903      	ldr	r3, [r0, #16]
 800086e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000870:	bf14      	ite	ne
 8000872:	2001      	movne	r0, #1
 8000874:	2000      	moveq	r0, #0
 8000876:	4770      	bx	lr

08000878 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000878:	b10a      	cbz	r2, 800087e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800087a:	6181      	str	r1, [r0, #24]
 800087c:	4770      	bx	lr
 800087e:	0409      	lsls	r1, r1, #16
 8000880:	e7fb      	b.n	800087a <HAL_GPIO_WritePin+0x2>
	...

08000884 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000884:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000888:	4604      	mov	r4, r0
 800088a:	b918      	cbnz	r0, 8000894 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800088c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800088e:	b002      	add	sp, #8
 8000890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000894:	6803      	ldr	r3, [r0, #0]
 8000896:	07dd      	lsls	r5, r3, #31
 8000898:	d410      	bmi.n	80008bc <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	0798      	lsls	r0, r3, #30
 800089e:	d458      	bmi.n	8000952 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008a0:	6823      	ldr	r3, [r4, #0]
 80008a2:	071a      	lsls	r2, r3, #28
 80008a4:	f100 809a 	bmi.w	80009dc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008a8:	6823      	ldr	r3, [r4, #0]
 80008aa:	075b      	lsls	r3, r3, #29
 80008ac:	f100 80b8 	bmi.w	8000a20 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008b0:	69a2      	ldr	r2, [r4, #24]
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	f040 8119 	bne.w	8000aea <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80008b8:	2000      	movs	r0, #0
 80008ba:	e7e8      	b.n	800088e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008bc:	4ba6      	ldr	r3, [pc, #664]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	f002 020c 	and.w	r2, r2, #12
 80008c4:	2a04      	cmp	r2, #4
 80008c6:	d007      	beq.n	80008d8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008ce:	2a08      	cmp	r2, #8
 80008d0:	d10a      	bne.n	80008e8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	0259      	lsls	r1, r3, #9
 80008d6:	d507      	bpl.n	80008e8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008d8:	4b9f      	ldr	r3, [pc, #636]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	039a      	lsls	r2, r3, #14
 80008de:	d5dc      	bpl.n	800089a <HAL_RCC_OscConfig+0x16>
 80008e0:	6863      	ldr	r3, [r4, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d1d9      	bne.n	800089a <HAL_RCC_OscConfig+0x16>
 80008e6:	e7d1      	b.n	800088c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e8:	6863      	ldr	r3, [r4, #4]
 80008ea:	4d9b      	ldr	r5, [pc, #620]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 80008ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008f0:	d111      	bne.n	8000916 <HAL_RCC_OscConfig+0x92>
 80008f2:	682b      	ldr	r3, [r5, #0]
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80008fa:	f7ff fe37 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008fe:	4d96      	ldr	r5, [pc, #600]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000900:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	039b      	lsls	r3, r3, #14
 8000906:	d4c8      	bmi.n	800089a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000908:	f7ff fe30 	bl	800056c <HAL_GetTick>
 800090c:	1b80      	subs	r0, r0, r6
 800090e:	2864      	cmp	r0, #100	; 0x64
 8000910:	d9f7      	bls.n	8000902 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000912:	2003      	movs	r0, #3
 8000914:	e7bb      	b.n	800088e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000916:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800091a:	d104      	bne.n	8000926 <HAL_RCC_OscConfig+0xa2>
 800091c:	682b      	ldr	r3, [r5, #0]
 800091e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000922:	602b      	str	r3, [r5, #0]
 8000924:	e7e5      	b.n	80008f2 <HAL_RCC_OscConfig+0x6e>
 8000926:	682a      	ldr	r2, [r5, #0]
 8000928:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800092c:	602a      	str	r2, [r5, #0]
 800092e:	682a      	ldr	r2, [r5, #0]
 8000930:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000934:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1df      	bne.n	80008fa <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800093a:	f7ff fe17 	bl	800056c <HAL_GetTick>
 800093e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000940:	682b      	ldr	r3, [r5, #0]
 8000942:	039f      	lsls	r7, r3, #14
 8000944:	d5a9      	bpl.n	800089a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000946:	f7ff fe11 	bl	800056c <HAL_GetTick>
 800094a:	1b80      	subs	r0, r0, r6
 800094c:	2864      	cmp	r0, #100	; 0x64
 800094e:	d9f7      	bls.n	8000940 <HAL_RCC_OscConfig+0xbc>
 8000950:	e7df      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000952:	4b81      	ldr	r3, [pc, #516]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	f012 0f0c 	tst.w	r2, #12
 800095a:	d007      	beq.n	800096c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000962:	2a08      	cmp	r2, #8
 8000964:	d111      	bne.n	800098a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	025e      	lsls	r6, r3, #9
 800096a:	d40e      	bmi.n	800098a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800096c:	4b7a      	ldr	r3, [pc, #488]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	0795      	lsls	r5, r2, #30
 8000972:	d502      	bpl.n	800097a <HAL_RCC_OscConfig+0xf6>
 8000974:	68e2      	ldr	r2, [r4, #12]
 8000976:	2a01      	cmp	r2, #1
 8000978:	d188      	bne.n	800088c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	6921      	ldr	r1, [r4, #16]
 800097e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000982:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000986:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000988:	e78a      	b.n	80008a0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800098a:	68e2      	ldr	r2, [r4, #12]
 800098c:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_RCC_OscConfig+0x2d8>)
 800098e:	b1b2      	cbz	r2, 80009be <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000994:	f7ff fdea 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000998:	4d6f      	ldr	r5, [pc, #444]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800099a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800099c:	682b      	ldr	r3, [r5, #0]
 800099e:	0798      	lsls	r0, r3, #30
 80009a0:	d507      	bpl.n	80009b2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009a2:	682b      	ldr	r3, [r5, #0]
 80009a4:	6922      	ldr	r2, [r4, #16]
 80009a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009ae:	602b      	str	r3, [r5, #0]
 80009b0:	e776      	b.n	80008a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009b2:	f7ff fddb 	bl	800056c <HAL_GetTick>
 80009b6:	1b80      	subs	r0, r0, r6
 80009b8:	2802      	cmp	r0, #2
 80009ba:	d9ef      	bls.n	800099c <HAL_RCC_OscConfig+0x118>
 80009bc:	e7a9      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80009be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009c0:	f7ff fdd4 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c4:	4d64      	ldr	r5, [pc, #400]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80009c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	0799      	lsls	r1, r3, #30
 80009cc:	f57f af68 	bpl.w	80008a0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009d0:	f7ff fdcc 	bl	800056c <HAL_GetTick>
 80009d4:	1b80      	subs	r0, r0, r6
 80009d6:	2802      	cmp	r0, #2
 80009d8:	d9f6      	bls.n	80009c8 <HAL_RCC_OscConfig+0x144>
 80009da:	e79a      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009dc:	6962      	ldr	r2, [r4, #20]
 80009de:	4b60      	ldr	r3, [pc, #384]	; (8000b60 <HAL_RCC_OscConfig+0x2dc>)
 80009e0:	b17a      	cbz	r2, 8000a02 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009e6:	f7ff fdc1 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ea:	4d5b      	ldr	r5, [pc, #364]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009ec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009f0:	079f      	lsls	r7, r3, #30
 80009f2:	f53f af59 	bmi.w	80008a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009f6:	f7ff fdb9 	bl	800056c <HAL_GetTick>
 80009fa:	1b80      	subs	r0, r0, r6
 80009fc:	2802      	cmp	r0, #2
 80009fe:	d9f6      	bls.n	80009ee <HAL_RCC_OscConfig+0x16a>
 8000a00:	e787      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a02:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a04:	f7ff fdb2 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a08:	4d53      	ldr	r5, [pc, #332]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a0a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a0c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a0e:	0798      	lsls	r0, r3, #30
 8000a10:	f57f af4a 	bpl.w	80008a8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a14:	f7ff fdaa 	bl	800056c <HAL_GetTick>
 8000a18:	1b80      	subs	r0, r0, r6
 8000a1a:	2802      	cmp	r0, #2
 8000a1c:	d9f6      	bls.n	8000a0c <HAL_RCC_OscConfig+0x188>
 8000a1e:	e778      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a20:	4b4d      	ldr	r3, [pc, #308]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000a22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a24:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a28:	d128      	bne.n	8000a7c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	9201      	str	r2, [sp, #4]
 8000a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a32:	641a      	str	r2, [r3, #64]	; 0x40
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a3e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a40:	4d48      	ldr	r5, [pc, #288]	; (8000b64 <HAL_RCC_OscConfig+0x2e0>)
 8000a42:	682b      	ldr	r3, [r5, #0]
 8000a44:	05d9      	lsls	r1, r3, #23
 8000a46:	d51b      	bpl.n	8000a80 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a48:	68a3      	ldr	r3, [r4, #8]
 8000a4a:	4d43      	ldr	r5, [pc, #268]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d127      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x21c>
 8000a50:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a52:	f043 0301 	orr.w	r3, r3, #1
 8000a56:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a58:	f7ff fd88 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a5c:	4d3e      	ldr	r5, [pc, #248]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a5e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a60:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a66:	079b      	lsls	r3, r3, #30
 8000a68:	d539      	bpl.n	8000ade <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	f43f af20 	beq.w	80008b0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a70:	4a39      	ldr	r2, [pc, #228]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000a72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	e719      	b.n	80008b0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	e7df      	b.n	8000a40 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a80:	682b      	ldr	r3, [r5, #0]
 8000a82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a86:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a88:	f7ff fd70 	bl	800056c <HAL_GetTick>
 8000a8c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a8e:	682b      	ldr	r3, [r5, #0]
 8000a90:	05da      	lsls	r2, r3, #23
 8000a92:	d4d9      	bmi.n	8000a48 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a94:	f7ff fd6a 	bl	800056c <HAL_GetTick>
 8000a98:	1bc0      	subs	r0, r0, r7
 8000a9a:	2802      	cmp	r0, #2
 8000a9c:	d9f7      	bls.n	8000a8e <HAL_RCC_OscConfig+0x20a>
 8000a9e:	e738      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa0:	2b05      	cmp	r3, #5
 8000aa2:	d104      	bne.n	8000aae <HAL_RCC_OscConfig+0x22a>
 8000aa4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	672b      	str	r3, [r5, #112]	; 0x70
 8000aac:	e7d0      	b.n	8000a50 <HAL_RCC_OscConfig+0x1cc>
 8000aae:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ab0:	f022 0201 	bic.w	r2, r2, #1
 8000ab4:	672a      	str	r2, [r5, #112]	; 0x70
 8000ab6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ab8:	f022 0204 	bic.w	r2, r2, #4
 8000abc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1ca      	bne.n	8000a58 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000ac2:	f7ff fd53 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000aca:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000acc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ace:	0798      	lsls	r0, r3, #30
 8000ad0:	d5cb      	bpl.n	8000a6a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fd4b 	bl	800056c <HAL_GetTick>
 8000ad6:	1bc0      	subs	r0, r0, r7
 8000ad8:	4540      	cmp	r0, r8
 8000ada:	d9f7      	bls.n	8000acc <HAL_RCC_OscConfig+0x248>
 8000adc:	e719      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ade:	f7ff fd45 	bl	800056c <HAL_GetTick>
 8000ae2:	1bc0      	subs	r0, r0, r7
 8000ae4:	4540      	cmp	r0, r8
 8000ae6:	d9bd      	bls.n	8000a64 <HAL_RCC_OscConfig+0x1e0>
 8000ae8:	e713      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000aea:	4d1b      	ldr	r5, [pc, #108]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
 8000aec:	68ab      	ldr	r3, [r5, #8]
 8000aee:	f003 030c 	and.w	r3, r3, #12
 8000af2:	2b08      	cmp	r3, #8
 8000af4:	f43f aeca 	beq.w	800088c <HAL_RCC_OscConfig+0x8>
 8000af8:	4e1b      	ldr	r6, [pc, #108]	; (8000b68 <HAL_RCC_OscConfig+0x2e4>)
 8000afa:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000afc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000afe:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b00:	d134      	bne.n	8000b6c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b02:	f7ff fd33 	bl	800056c <HAL_GetTick>
 8000b06:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b08:	682b      	ldr	r3, [r5, #0]
 8000b0a:	0199      	lsls	r1, r3, #6
 8000b0c:	d41e      	bmi.n	8000b4c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b0e:	6a22      	ldr	r2, [r4, #32]
 8000b10:	69e3      	ldr	r3, [r4, #28]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b16:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b22:	4c0d      	ldr	r4, [pc, #52]	; (8000b58 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b24:	0852      	lsrs	r2, r2, #1
 8000b26:	3a01      	subs	r2, #1
 8000b28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b2c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b2e:	2301      	movs	r3, #1
 8000b30:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b32:	f7ff fd1b 	bl	800056c <HAL_GetTick>
 8000b36:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b38:	6823      	ldr	r3, [r4, #0]
 8000b3a:	019a      	lsls	r2, r3, #6
 8000b3c:	f53f aebc 	bmi.w	80008b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b40:	f7ff fd14 	bl	800056c <HAL_GetTick>
 8000b44:	1b40      	subs	r0, r0, r5
 8000b46:	2802      	cmp	r0, #2
 8000b48:	d9f6      	bls.n	8000b38 <HAL_RCC_OscConfig+0x2b4>
 8000b4a:	e6e2      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4c:	f7ff fd0e 	bl	800056c <HAL_GetTick>
 8000b50:	1bc0      	subs	r0, r0, r7
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9d8      	bls.n	8000b08 <HAL_RCC_OscConfig+0x284>
 8000b56:	e6dc      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	42470000 	.word	0x42470000
 8000b60:	42470e80 	.word	0x42470e80
 8000b64:	40007000 	.word	0x40007000
 8000b68:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fcfe 	bl	800056c <HAL_GetTick>
 8000b70:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b72:	682b      	ldr	r3, [r5, #0]
 8000b74:	019b      	lsls	r3, r3, #6
 8000b76:	f57f ae9f 	bpl.w	80008b8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b7a:	f7ff fcf7 	bl	800056c <HAL_GetTick>
 8000b7e:	1b00      	subs	r0, r0, r4
 8000b80:	2802      	cmp	r0, #2
 8000b82:	d9f6      	bls.n	8000b72 <HAL_RCC_OscConfig+0x2ee>
 8000b84:	e6c5      	b.n	8000912 <HAL_RCC_OscConfig+0x8e>
 8000b86:	bf00      	nop

08000b88 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b88:	4913      	ldr	r1, [pc, #76]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b8a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b8c:	688b      	ldr	r3, [r1, #8]
 8000b8e:	f003 030c 	and.w	r3, r3, #12
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	d003      	beq.n	8000b9e <HAL_RCC_GetSysClockFreq+0x16>
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d003      	beq.n	8000ba2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b9a:	4810      	ldr	r0, [pc, #64]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b9c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000b9e:	4810      	ldr	r0, [pc, #64]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ba0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ba2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ba4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ba8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bac:	bf14      	ite	ne
 8000bae:	480c      	ldrne	r0, [pc, #48]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb0:	480a      	ldreq	r0, [pc, #40]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bb6:	bf18      	it	ne
 8000bb8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bbe:	fba1 0100 	umull	r0, r1, r1, r0
 8000bc2:	f7ff fb01 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bce:	3301      	adds	r3, #1
 8000bd0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000bd2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000bd6:	bd08      	pop	{r3, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	00f42400 	.word	0x00f42400
 8000be0:	007a1200 	.word	0x007a1200

08000be4 <HAL_RCC_ClockConfig>:
{
 8000be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000be8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000bea:	4604      	mov	r4, r0
 8000bec:	b910      	cbnz	r0, 8000bf4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000bee:	2001      	movs	r0, #1
 8000bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bf4:	4b44      	ldr	r3, [pc, #272]	; (8000d08 <HAL_RCC_ClockConfig+0x124>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	f002 020f 	and.w	r2, r2, #15
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	d328      	bcc.n	8000c52 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c00:	6821      	ldr	r1, [r4, #0]
 8000c02:	078f      	lsls	r7, r1, #30
 8000c04:	d42d      	bmi.n	8000c62 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c06:	07c8      	lsls	r0, r1, #31
 8000c08:	d440      	bmi.n	8000c8c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c0a:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <HAL_RCC_ClockConfig+0x124>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	f002 020f 	and.w	r2, r2, #15
 8000c12:	4295      	cmp	r5, r2
 8000c14:	d366      	bcc.n	8000ce4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c16:	6822      	ldr	r2, [r4, #0]
 8000c18:	0751      	lsls	r1, r2, #29
 8000c1a:	d46c      	bmi.n	8000cf6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c1c:	0713      	lsls	r3, r2, #28
 8000c1e:	d507      	bpl.n	8000c30 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c20:	4a3a      	ldr	r2, [pc, #232]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c22:	6921      	ldr	r1, [r4, #16]
 8000c24:	6893      	ldr	r3, [r2, #8]
 8000c26:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c2a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c2e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c30:	f7ff ffaa 	bl	8000b88 <HAL_RCC_GetSysClockFreq>
 8000c34:	4b35      	ldr	r3, [pc, #212]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c36:	4a36      	ldr	r2, [pc, #216]	; (8000d10 <HAL_RCC_ClockConfig+0x12c>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c3e:	5cd3      	ldrb	r3, [r2, r3]
 8000c40:	40d8      	lsrs	r0, r3
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <HAL_RCC_ClockConfig+0x130>)
 8000c44:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff fc46 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f003 030f 	and.w	r3, r3, #15
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d1c6      	bne.n	8000bee <HAL_RCC_ClockConfig+0xa>
 8000c60:	e7ce      	b.n	8000c00 <HAL_RCC_ClockConfig+0x1c>
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c64:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c68:	bf1e      	ittt	ne
 8000c6a:	689a      	ldrne	r2, [r3, #8]
 8000c6c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000c70:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c72:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c74:	bf42      	ittt	mi
 8000c76:	689a      	ldrmi	r2, [r3, #8]
 8000c78:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000c7c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	68a0      	ldr	r0, [r4, #8]
 8000c82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000c86:	4302      	orrs	r2, r0
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	e7bc      	b.n	8000c06 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c8c:	6862      	ldr	r2, [r4, #4]
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c90:	2a01      	cmp	r2, #1
 8000c92:	d11d      	bne.n	8000cd0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9a:	d0a8      	beq.n	8000bee <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c9c:	4e1b      	ldr	r6, [pc, #108]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000c9e:	68b3      	ldr	r3, [r6, #8]
 8000ca0:	f023 0303 	bic.w	r3, r3, #3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000ca8:	f7ff fc60 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cac:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cb0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cb2:	68b3      	ldr	r3, [r6, #8]
 8000cb4:	6862      	ldr	r2, [r4, #4]
 8000cb6:	f003 030c 	and.w	r3, r3, #12
 8000cba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cbe:	d0a4      	beq.n	8000c0a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cc0:	f7ff fc54 	bl	800056c <HAL_GetTick>
 8000cc4:	1bc0      	subs	r0, r0, r7
 8000cc6:	4540      	cmp	r0, r8
 8000cc8:	d9f3      	bls.n	8000cb2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000cca:	2003      	movs	r0, #3
}
 8000ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cd0:	1e91      	subs	r1, r2, #2
 8000cd2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cd4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cd6:	d802      	bhi.n	8000cde <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cd8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cdc:	e7dd      	b.n	8000c9a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cde:	f013 0f02 	tst.w	r3, #2
 8000ce2:	e7da      	b.n	8000c9a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce4:	b2ea      	uxtb	r2, r5
 8000ce6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	429d      	cmp	r5, r3
 8000cf0:	f47f af7d 	bne.w	8000bee <HAL_RCC_ClockConfig+0xa>
 8000cf4:	e78f      	b.n	8000c16 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cf6:	4905      	ldr	r1, [pc, #20]	; (8000d0c <HAL_RCC_ClockConfig+0x128>)
 8000cf8:	68e0      	ldr	r0, [r4, #12]
 8000cfa:	688b      	ldr	r3, [r1, #8]
 8000cfc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d00:	4303      	orrs	r3, r0
 8000d02:	608b      	str	r3, [r1, #8]
 8000d04:	e78a      	b.n	8000c1c <HAL_RCC_ClockConfig+0x38>
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	08001cf1 	.word	0x08001cf1
 8000d14:	20000008 	.word	0x20000008

08000d18 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000d18:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <HAL_RCC_GetHCLKFreq+0x8>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008

08000d24 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000d2e:	5cd3      	ldrb	r3, [r2, r3]
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d32:	6810      	ldr	r0, [r2, #0]
}
 8000d34:	40d8      	lsrs	r0, r3
 8000d36:	4770      	bx	lr
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	08001d01 	.word	0x08001d01
 8000d40:	20000008 	.word	0x20000008

08000d44 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d4e:	5cd3      	ldrb	r3, [r2, r3]
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d52:	6810      	ldr	r0, [r2, #0]
}
 8000d54:	40d8      	lsrs	r0, r3
 8000d56:	4770      	bx	lr
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	08001d01 	.word	0x08001d01
 8000d60:	20000008 	.word	0x20000008

08000d64 <HAL_TIM_PeriodElapsedCallback>:
 8000d64:	4770      	bx	lr

08000d66 <HAL_TIM_OC_DelayElapsedCallback>:
 8000d66:	4770      	bx	lr

08000d68 <HAL_TIM_IC_CaptureCallback>:
 8000d68:	4770      	bx	lr

08000d6a <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d6a:	4770      	bx	lr

08000d6c <HAL_TIM_TriggerCallback>:
 8000d6c:	4770      	bx	lr

08000d6e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d6e:	6803      	ldr	r3, [r0, #0]
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	0791      	lsls	r1, r2, #30
{
 8000d74:	b510      	push	{r4, lr}
 8000d76:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d78:	d50e      	bpl.n	8000d98 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000d7a:	68da      	ldr	r2, [r3, #12]
 8000d7c:	0792      	lsls	r2, r2, #30
 8000d7e:	d50b      	bpl.n	8000d98 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d80:	f06f 0202 	mvn.w	r2, #2
 8000d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d86:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d88:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d8a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d8c:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d8e:	d077      	beq.n	8000e80 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000d90:	f7ff ffea 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d94:	2300      	movs	r3, #0
 8000d96:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d98:	6823      	ldr	r3, [r4, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	0750      	lsls	r0, r2, #29
 8000d9e:	d510      	bpl.n	8000dc2 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	0751      	lsls	r1, r2, #29
 8000da4:	d50d      	bpl.n	8000dc2 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000da6:	f06f 0204 	mvn.w	r2, #4
 8000daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000dac:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000dae:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000db0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000db4:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000db6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000db8:	d068      	beq.n	8000e8c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000dba:	f7ff ffd5 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	691a      	ldr	r2, [r3, #16]
 8000dc6:	0712      	lsls	r2, r2, #28
 8000dc8:	d50f      	bpl.n	8000dea <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	0710      	lsls	r0, r2, #28
 8000dce:	d50c      	bpl.n	8000dea <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000dd0:	f06f 0208 	mvn.w	r2, #8
 8000dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000dd6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000dd8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000dda:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000ddc:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000dde:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000de0:	d05a      	beq.n	8000e98 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000de2:	f7ff ffc1 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000de6:	2300      	movs	r3, #0
 8000de8:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	691a      	ldr	r2, [r3, #16]
 8000dee:	06d2      	lsls	r2, r2, #27
 8000df0:	d510      	bpl.n	8000e14 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	06d0      	lsls	r0, r2, #27
 8000df6:	d50d      	bpl.n	8000e14 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000df8:	f06f 0210 	mvn.w	r2, #16
 8000dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dfe:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e00:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e02:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e06:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e08:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e0a:	d04b      	beq.n	8000ea4 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e0c:	f7ff ffac 	bl	8000d68 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e10:	2300      	movs	r3, #0
 8000e12:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	691a      	ldr	r2, [r3, #16]
 8000e18:	07d1      	lsls	r1, r2, #31
 8000e1a:	d508      	bpl.n	8000e2e <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	07d2      	lsls	r2, r2, #31
 8000e20:	d505      	bpl.n	8000e2e <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000e22:	f06f 0201 	mvn.w	r2, #1
 8000e26:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e28:	4620      	mov	r0, r4
 8000e2a:	f7ff ff9b 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e2e:	6823      	ldr	r3, [r4, #0]
 8000e30:	691a      	ldr	r2, [r3, #16]
 8000e32:	0610      	lsls	r0, r2, #24
 8000e34:	d508      	bpl.n	8000e48 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	0611      	lsls	r1, r2, #24
 8000e3a:	d505      	bpl.n	8000e48 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000e42:	4620      	mov	r0, r4
 8000e44:	f000 f8d7 	bl	8000ff6 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	0652      	lsls	r2, r2, #25
 8000e4e:	d508      	bpl.n	8000e62 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	0650      	lsls	r0, r2, #25
 8000e54:	d505      	bpl.n	8000e62 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e5a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	f7ff ff85 	bl	8000d6c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e62:	6823      	ldr	r3, [r4, #0]
 8000e64:	691a      	ldr	r2, [r3, #16]
 8000e66:	0691      	lsls	r1, r2, #26
 8000e68:	d522      	bpl.n	8000eb0 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	0692      	lsls	r2, r2, #26
 8000e6e:	d51f      	bpl.n	8000eb0 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e70:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000e74:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e76:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000e7c:	f000 b8ba 	b.w	8000ff4 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e80:	f7ff ff71 	bl	8000d66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e84:	4620      	mov	r0, r4
 8000e86:	f7ff ff70 	bl	8000d6a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e8a:	e783      	b.n	8000d94 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e8c:	f7ff ff6b 	bl	8000d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e90:	4620      	mov	r0, r4
 8000e92:	f7ff ff6a 	bl	8000d6a <HAL_TIM_PWM_PulseFinishedCallback>
 8000e96:	e792      	b.n	8000dbe <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e98:	f7ff ff65 	bl	8000d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	f7ff ff64 	bl	8000d6a <HAL_TIM_PWM_PulseFinishedCallback>
 8000ea2:	e7a0      	b.n	8000de6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ea4:	f7ff ff5f 	bl	8000d66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f7ff ff5e 	bl	8000d6a <HAL_TIM_PWM_PulseFinishedCallback>
 8000eae:	e7af      	b.n	8000e10 <HAL_TIM_IRQHandler+0xa2>
 8000eb0:	bd10      	pop	{r4, pc}
	...

08000eb4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000eb4:	4a2e      	ldr	r2, [pc, #184]	; (8000f70 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000eb6:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000eb8:	4290      	cmp	r0, r2
 8000eba:	d012      	beq.n	8000ee2 <TIM_Base_SetConfig+0x2e>
 8000ebc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ec0:	d00f      	beq.n	8000ee2 <TIM_Base_SetConfig+0x2e>
 8000ec2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000ec6:	4290      	cmp	r0, r2
 8000ec8:	d00b      	beq.n	8000ee2 <TIM_Base_SetConfig+0x2e>
 8000eca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ece:	4290      	cmp	r0, r2
 8000ed0:	d007      	beq.n	8000ee2 <TIM_Base_SetConfig+0x2e>
 8000ed2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ed6:	4290      	cmp	r0, r2
 8000ed8:	d003      	beq.n	8000ee2 <TIM_Base_SetConfig+0x2e>
 8000eda:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ede:	4290      	cmp	r0, r2
 8000ee0:	d11d      	bne.n	8000f1e <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000ee2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ee8:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000eea:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <TIM_Base_SetConfig+0xbc>)
 8000eec:	4290      	cmp	r0, r2
 8000eee:	d104      	bne.n	8000efa <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ef0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	e028      	b.n	8000f4c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000efa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000efe:	d0f7      	beq.n	8000ef0 <TIM_Base_SetConfig+0x3c>
 8000f00:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <TIM_Base_SetConfig+0xc0>)
 8000f02:	4290      	cmp	r0, r2
 8000f04:	d0f4      	beq.n	8000ef0 <TIM_Base_SetConfig+0x3c>
 8000f06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f0a:	4290      	cmp	r0, r2
 8000f0c:	d0f0      	beq.n	8000ef0 <TIM_Base_SetConfig+0x3c>
 8000f0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f12:	4290      	cmp	r0, r2
 8000f14:	d0ec      	beq.n	8000ef0 <TIM_Base_SetConfig+0x3c>
 8000f16:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f1a:	4290      	cmp	r0, r2
 8000f1c:	d0e8      	beq.n	8000ef0 <TIM_Base_SetConfig+0x3c>
 8000f1e:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <TIM_Base_SetConfig+0xc4>)
 8000f20:	4290      	cmp	r0, r2
 8000f22:	d0e5      	beq.n	8000ef0 <TIM_Base_SetConfig+0x3c>
 8000f24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f28:	4290      	cmp	r0, r2
 8000f2a:	d0e1      	beq.n	8000ef0 <TIM_Base_SetConfig+0x3c>
 8000f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f30:	4290      	cmp	r0, r2
 8000f32:	d0dd      	beq.n	8000ef0 <TIM_Base_SetConfig+0x3c>
 8000f34:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000f38:	4290      	cmp	r0, r2
 8000f3a:	d0d9      	beq.n	8000ef0 <TIM_Base_SetConfig+0x3c>
 8000f3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f40:	4290      	cmp	r0, r2
 8000f42:	d0d5      	beq.n	8000ef0 <TIM_Base_SetConfig+0x3c>
 8000f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f48:	4290      	cmp	r0, r2
 8000f4a:	d0d1      	beq.n	8000ef0 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8000f4c:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f4e:	688b      	ldr	r3, [r1, #8]
 8000f50:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f52:	680b      	ldr	r3, [r1, #0]
 8000f54:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <TIM_Base_SetConfig+0xbc>)
 8000f58:	4298      	cmp	r0, r3
 8000f5a:	d006      	beq.n	8000f6a <TIM_Base_SetConfig+0xb6>
 8000f5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f60:	4298      	cmp	r0, r3
 8000f62:	d002      	beq.n	8000f6a <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000f64:	2301      	movs	r3, #1
 8000f66:	6143      	str	r3, [r0, #20]
}
 8000f68:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000f6a:	690b      	ldr	r3, [r1, #16]
 8000f6c:	6303      	str	r3, [r0, #48]	; 0x30
 8000f6e:	e7f9      	b.n	8000f64 <TIM_Base_SetConfig+0xb0>
 8000f70:	40010000 	.word	0x40010000
 8000f74:	40000400 	.word	0x40000400
 8000f78:	40014000 	.word	0x40014000

08000f7c <HAL_TIM_Base_Init>:
{ 
 8000f7c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000f7e:	4604      	mov	r4, r0
 8000f80:	b1a0      	cbz	r0, 8000fac <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f82:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f8a:	b91b      	cbnz	r3, 8000f94 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f8c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8000f90:	f000 fd72 	bl	8001a78 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f94:	2302      	movs	r3, #2
 8000f96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000f9a:	6820      	ldr	r0, [r4, #0]
 8000f9c:	1d21      	adds	r1, r4, #4
 8000f9e:	f7ff ff89 	bl	8000eb4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8000fa8:	2000      	movs	r0, #0
 8000faa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fac:	2001      	movs	r0, #1
}
 8000fae:	bd10      	pop	{r4, pc}

08000fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000fb0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fb4:	2b01      	cmp	r3, #1
{
 8000fb6:	b510      	push	{r4, lr}
 8000fb8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000fbc:	d018      	beq.n	8000ff0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000fbe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fc2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000fc4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fc6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000fc8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fce:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	4322      	orrs	r2, r4
 8000fd4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fdc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000fea:	2300      	movs	r3, #0
 8000fec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000ff0:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8000ff2:	bd10      	pop	{r4, pc}

08000ff4 <HAL_TIMEx_CommutationCallback>:
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000ff6:	4770      	bx	lr

08000ff8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000ff8:	6803      	ldr	r3, [r0, #0]
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001000:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001002:	695a      	ldr	r2, [r3, #20]
 8001004:	f022 0201 	bic.w	r2, r2, #1
 8001008:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800100a:	2320      	movs	r3, #32
 800100c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001010:	4770      	bx	lr
	...

08001014 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001018:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800101a:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 800101c:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800101e:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001020:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001024:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001026:	6133      	str	r3, [r6, #16]
{
 8001028:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800102a:	6883      	ldr	r3, [r0, #8]
 800102c:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800102e:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001030:	4303      	orrs	r3, r0
 8001032:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001034:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001038:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800103a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800103e:	430b      	orrs	r3, r1
 8001040:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001042:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001044:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001046:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 800104c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800104e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001052:	6173      	str	r3, [r6, #20]
 8001054:	4b7a      	ldr	r3, [pc, #488]	; (8001240 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001056:	d17c      	bne.n	8001152 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001058:	429e      	cmp	r6, r3
 800105a:	d003      	beq.n	8001064 <UART_SetConfig+0x50>
 800105c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001060:	429e      	cmp	r6, r3
 8001062:	d144      	bne.n	80010ee <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001064:	f7ff fe6e 	bl	8000d44 <HAL_RCC_GetPCLK2Freq>
 8001068:	2519      	movs	r5, #25
 800106a:	fb05 f300 	mul.w	r3, r5, r0
 800106e:	6860      	ldr	r0, [r4, #4]
 8001070:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001074:	0040      	lsls	r0, r0, #1
 8001076:	fbb3 f3f0 	udiv	r3, r3, r0
 800107a:	fbb3 f3f9 	udiv	r3, r3, r9
 800107e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001082:	f7ff fe5f 	bl	8000d44 <HAL_RCC_GetPCLK2Freq>
 8001086:	6863      	ldr	r3, [r4, #4]
 8001088:	4368      	muls	r0, r5
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001090:	f7ff fe58 	bl	8000d44 <HAL_RCC_GetPCLK2Freq>
 8001094:	6863      	ldr	r3, [r4, #4]
 8001096:	4368      	muls	r0, r5
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fbb0 f3f3 	udiv	r3, r0, r3
 800109e:	fbb3 f3f9 	udiv	r3, r3, r9
 80010a2:	fb09 7313 	mls	r3, r9, r3, r7
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	3332      	adds	r3, #50	; 0x32
 80010aa:	fbb3 f3f9 	udiv	r3, r3, r9
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80010b4:	f7ff fe46 	bl	8000d44 <HAL_RCC_GetPCLK2Freq>
 80010b8:	6862      	ldr	r2, [r4, #4]
 80010ba:	4368      	muls	r0, r5
 80010bc:	0052      	lsls	r2, r2, #1
 80010be:	fbb0 faf2 	udiv	sl, r0, r2
 80010c2:	f7ff fe3f 	bl	8000d44 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010c6:	6863      	ldr	r3, [r4, #4]
 80010c8:	4368      	muls	r0, r5
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80010d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80010d4:	fb09 a313 	mls	r3, r9, r3, sl
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	3332      	adds	r3, #50	; 0x32
 80010dc:	fbb3 f3f9 	udiv	r3, r3, r9
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010e6:	443b      	add	r3, r7
 80010e8:	60b3      	str	r3, [r6, #8]
 80010ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010ee:	f7ff fe19 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
 80010f2:	2519      	movs	r5, #25
 80010f4:	fb05 f300 	mul.w	r3, r5, r0
 80010f8:	6860      	ldr	r0, [r4, #4]
 80010fa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010fe:	0040      	lsls	r0, r0, #1
 8001100:	fbb3 f3f0 	udiv	r3, r3, r0
 8001104:	fbb3 f3f9 	udiv	r3, r3, r9
 8001108:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800110c:	f7ff fe0a 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
 8001110:	6863      	ldr	r3, [r4, #4]
 8001112:	4368      	muls	r0, r5
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fbb0 f7f3 	udiv	r7, r0, r3
 800111a:	f7ff fe03 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	4368      	muls	r0, r5
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fbb0 f3f3 	udiv	r3, r0, r3
 8001128:	fbb3 f3f9 	udiv	r3, r3, r9
 800112c:	fb09 7313 	mls	r3, r9, r3, r7
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	3332      	adds	r3, #50	; 0x32
 8001134:	fbb3 f3f9 	udiv	r3, r3, r9
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800113e:	f7ff fdf1 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
 8001142:	6862      	ldr	r2, [r4, #4]
 8001144:	4368      	muls	r0, r5
 8001146:	0052      	lsls	r2, r2, #1
 8001148:	fbb0 faf2 	udiv	sl, r0, r2
 800114c:	f7ff fdea 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
 8001150:	e7b9      	b.n	80010c6 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001152:	429e      	cmp	r6, r3
 8001154:	d002      	beq.n	800115c <UART_SetConfig+0x148>
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <UART_SetConfig+0x230>)
 8001158:	429e      	cmp	r6, r3
 800115a:	d140      	bne.n	80011de <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800115c:	f7ff fdf2 	bl	8000d44 <HAL_RCC_GetPCLK2Freq>
 8001160:	6867      	ldr	r7, [r4, #4]
 8001162:	2519      	movs	r5, #25
 8001164:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001168:	fb05 f300 	mul.w	r3, r5, r0
 800116c:	00bf      	lsls	r7, r7, #2
 800116e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001172:	fbb3 f3f9 	udiv	r3, r3, r9
 8001176:	011f      	lsls	r7, r3, #4
 8001178:	f7ff fde4 	bl	8000d44 <HAL_RCC_GetPCLK2Freq>
 800117c:	6863      	ldr	r3, [r4, #4]
 800117e:	4368      	muls	r0, r5
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	fbb0 f8f3 	udiv	r8, r0, r3
 8001186:	f7ff fddd 	bl	8000d44 <HAL_RCC_GetPCLK2Freq>
 800118a:	6863      	ldr	r3, [r4, #4]
 800118c:	4368      	muls	r0, r5
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	fbb0 f3f3 	udiv	r3, r0, r3
 8001194:	fbb3 f3f9 	udiv	r3, r3, r9
 8001198:	fb09 8313 	mls	r3, r9, r3, r8
 800119c:	011b      	lsls	r3, r3, #4
 800119e:	3332      	adds	r3, #50	; 0x32
 80011a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80011a4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80011a8:	f7ff fdcc 	bl	8000d44 <HAL_RCC_GetPCLK2Freq>
 80011ac:	6862      	ldr	r2, [r4, #4]
 80011ae:	4368      	muls	r0, r5
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	fbb0 faf2 	udiv	sl, r0, r2
 80011b6:	f7ff fdc5 	bl	8000d44 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80011ba:	6863      	ldr	r3, [r4, #4]
 80011bc:	4368      	muls	r0, r5
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80011c8:	fb09 a313 	mls	r3, r9, r3, sl
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	3332      	adds	r3, #50	; 0x32
 80011d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	ea43 0308 	orr.w	r3, r3, r8
 80011dc:	e783      	b.n	80010e6 <UART_SetConfig+0xd2>
 80011de:	f7ff fda1 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
 80011e2:	6867      	ldr	r7, [r4, #4]
 80011e4:	2519      	movs	r5, #25
 80011e6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80011ea:	fb05 f300 	mul.w	r3, r5, r0
 80011ee:	00bf      	lsls	r7, r7, #2
 80011f0:	fbb3 f3f7 	udiv	r3, r3, r7
 80011f4:	fbb3 f3f9 	udiv	r3, r3, r9
 80011f8:	011f      	lsls	r7, r3, #4
 80011fa:	f7ff fd93 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
 80011fe:	6863      	ldr	r3, [r4, #4]
 8001200:	4368      	muls	r0, r5
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	fbb0 f8f3 	udiv	r8, r0, r3
 8001208:	f7ff fd8c 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
 800120c:	6863      	ldr	r3, [r4, #4]
 800120e:	4368      	muls	r0, r5
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	fbb0 f3f3 	udiv	r3, r0, r3
 8001216:	fbb3 f3f9 	udiv	r3, r3, r9
 800121a:	fb09 8313 	mls	r3, r9, r3, r8
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	3332      	adds	r3, #50	; 0x32
 8001222:	fbb3 f3f9 	udiv	r3, r3, r9
 8001226:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800122a:	f7ff fd7b 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
 800122e:	6862      	ldr	r2, [r4, #4]
 8001230:	4368      	muls	r0, r5
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	fbb0 faf2 	udiv	sl, r0, r2
 8001238:	f7ff fd74 	bl	8000d24 <HAL_RCC_GetPCLK1Freq>
 800123c:	e7bd      	b.n	80011ba <UART_SetConfig+0x1a6>
 800123e:	bf00      	nop
 8001240:	40011000 	.word	0x40011000
 8001244:	40011400 	.word	0x40011400

08001248 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	4604      	mov	r4, r0
 800124c:	460e      	mov	r6, r1
 800124e:	4617      	mov	r7, r2
 8001250:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001252:	6821      	ldr	r1, [r4, #0]
 8001254:	680b      	ldr	r3, [r1, #0]
 8001256:	ea36 0303 	bics.w	r3, r6, r3
 800125a:	d101      	bne.n	8001260 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800125c:	2000      	movs	r0, #0
}
 800125e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001260:	1c6b      	adds	r3, r5, #1
 8001262:	d0f7      	beq.n	8001254 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001264:	b995      	cbnz	r5, 800128c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800126e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001278:	2320      	movs	r3, #32
 800127a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800127e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001282:	2300      	movs	r3, #0
 8001284:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001288:	2003      	movs	r0, #3
 800128a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800128c:	f7ff f96e 	bl	800056c <HAL_GetTick>
 8001290:	1bc0      	subs	r0, r0, r7
 8001292:	4285      	cmp	r5, r0
 8001294:	d2dd      	bcs.n	8001252 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001296:	e7e6      	b.n	8001266 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001298 <HAL_UART_Init>:
{
 8001298:	b510      	push	{r4, lr}
  if(huart == NULL)
 800129a:	4604      	mov	r4, r0
 800129c:	b340      	cbz	r0, 80012f0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800129e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012a6:	b91b      	cbnz	r3, 80012b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80012a8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80012ac:	f000 fc02 	bl	8001ab4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80012b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80012b2:	2324      	movs	r3, #36	; 0x24
 80012b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80012b8:	68d3      	ldr	r3, [r2, #12]
 80012ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012be:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80012c0:	4620      	mov	r0, r4
 80012c2:	f7ff fea7 	bl	8001014 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012d6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012de:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012e0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80012e2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012e4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80012e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80012ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80012ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012f0:	2001      	movs	r0, #1
}
 80012f2:	bd10      	pop	{r4, pc}

080012f4 <HAL_UART_Transmit>:
{
 80012f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80012fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012fe:	2b20      	cmp	r3, #32
{
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
 8001304:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8001306:	d14f      	bne.n	80013a8 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8001308:	2900      	cmp	r1, #0
 800130a:	d04a      	beq.n	80013a2 <HAL_UART_Transmit+0xae>
 800130c:	2a00      	cmp	r2, #0
 800130e:	d048      	beq.n	80013a2 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001310:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001314:	2b01      	cmp	r3, #1
 8001316:	d047      	beq.n	80013a8 <HAL_UART_Transmit+0xb4>
 8001318:	2301      	movs	r3, #1
 800131a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800131e:	2300      	movs	r3, #0
 8001320:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001322:	2321      	movs	r3, #33	; 0x21
 8001324:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001328:	f7ff f920 	bl	800056c <HAL_GetTick>
    huart->TxXferSize = Size;
 800132c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001330:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001332:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001336:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001338:	b29b      	uxth	r3, r3
 800133a:	b96b      	cbnz	r3, 8001358 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	4632      	mov	r2, r6
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	4620      	mov	r0, r4
 8001344:	f7ff ff80 	bl	8001248 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001348:	b9b0      	cbnz	r0, 8001378 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 800134a:	2320      	movs	r3, #32
 800134c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001350:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001358:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800135a:	3b01      	subs	r3, #1
 800135c:	b29b      	uxth	r3, r3
 800135e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001360:	68a3      	ldr	r3, [r4, #8]
 8001362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001366:	4632      	mov	r2, r6
 8001368:	463b      	mov	r3, r7
 800136a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800136e:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001370:	d10e      	bne.n	8001390 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001372:	f7ff ff69 	bl	8001248 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001376:	b110      	cbz	r0, 800137e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001378:	2003      	movs	r0, #3
 800137a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800137e:	882b      	ldrh	r3, [r5, #0]
 8001380:	6822      	ldr	r2, [r4, #0]
 8001382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001386:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001388:	6923      	ldr	r3, [r4, #16]
 800138a:	b943      	cbnz	r3, 800139e <HAL_UART_Transmit+0xaa>
          pData +=2U;
 800138c:	3502      	adds	r5, #2
 800138e:	e7d2      	b.n	8001336 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001390:	f7ff ff5a 	bl	8001248 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001394:	2800      	cmp	r0, #0
 8001396:	d1ef      	bne.n	8001378 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	782a      	ldrb	r2, [r5, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	3501      	adds	r5, #1
 80013a0:	e7c9      	b.n	8001336 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80013a2:	2001      	movs	r0, #1
 80013a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80013a8:	2002      	movs	r0, #2
}
 80013aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080013ae <HAL_UART_TxCpltCallback>:
 80013ae:	4770      	bx	lr

080013b0 <HAL_UART_RxCpltCallback>:
 80013b0:	4770      	bx	lr

080013b2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80013b2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80013b6:	2b22      	cmp	r3, #34	; 0x22
{
 80013b8:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80013ba:	d132      	bne.n	8001422 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013bc:	6883      	ldr	r3, [r0, #8]
 80013be:	6901      	ldr	r1, [r0, #16]
 80013c0:	6802      	ldr	r2, [r0, #0]
 80013c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013c8:	d11f      	bne.n	800140a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80013ca:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80013cc:	b9c9      	cbnz	r1, 8001402 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80013ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013d2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80013d6:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80013d8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80013da:	3c01      	subs	r4, #1
 80013dc:	b2a4      	uxth	r4, r4
 80013de:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80013e0:	b96c      	cbnz	r4, 80013fe <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013e2:	6803      	ldr	r3, [r0, #0]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80013ea:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80013f4:	2320      	movs	r3, #32
 80013f6:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80013fa:	f7ff ffd9 	bl	80013b0 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80013fe:	2000      	movs	r0, #0
}
 8001400:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	f823 2b01 	strh.w	r2, [r3], #1
 8001408:	e7e5      	b.n	80013d6 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800140a:	b921      	cbnz	r1, 8001416 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800140c:	1c59      	adds	r1, r3, #1
 800140e:	6852      	ldr	r2, [r2, #4]
 8001410:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	e7e0      	b.n	80013d8 <UART_Receive_IT+0x26>
 8001416:	6852      	ldr	r2, [r2, #4]
 8001418:	1c59      	adds	r1, r3, #1
 800141a:	6281      	str	r1, [r0, #40]	; 0x28
 800141c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001420:	e7f7      	b.n	8001412 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8001422:	2002      	movs	r0, #2
 8001424:	bd10      	pop	{r4, pc}

08001426 <HAL_UART_ErrorCallback>:
 8001426:	4770      	bx	lr

08001428 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001428:	6803      	ldr	r3, [r0, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800142c:	68d9      	ldr	r1, [r3, #12]
{
 800142e:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8001430:	0716      	lsls	r6, r2, #28
{
 8001432:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001434:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001436:	d107      	bne.n	8001448 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001438:	0696      	lsls	r6, r2, #26
 800143a:	d55a      	bpl.n	80014f2 <HAL_UART_IRQHandler+0xca>
 800143c:	068d      	lsls	r5, r1, #26
 800143e:	d558      	bpl.n	80014f2 <HAL_UART_IRQHandler+0xca>
}
 8001440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001444:	f7ff bfb5 	b.w	80013b2 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001448:	f015 0501 	ands.w	r5, r5, #1
 800144c:	d102      	bne.n	8001454 <HAL_UART_IRQHandler+0x2c>
 800144e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001452:	d04e      	beq.n	80014f2 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001454:	07d3      	lsls	r3, r2, #31
 8001456:	d505      	bpl.n	8001464 <HAL_UART_IRQHandler+0x3c>
 8001458:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800145a:	bf42      	ittt	mi
 800145c:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800145e:	f043 0301 	orrmi.w	r3, r3, #1
 8001462:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001464:	0750      	lsls	r0, r2, #29
 8001466:	d504      	bpl.n	8001472 <HAL_UART_IRQHandler+0x4a>
 8001468:	b11d      	cbz	r5, 8001472 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800146a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001472:	0793      	lsls	r3, r2, #30
 8001474:	d504      	bpl.n	8001480 <HAL_UART_IRQHandler+0x58>
 8001476:	b11d      	cbz	r5, 8001480 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001478:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800147a:	f043 0304 	orr.w	r3, r3, #4
 800147e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001480:	0716      	lsls	r6, r2, #28
 8001482:	d504      	bpl.n	800148e <HAL_UART_IRQHandler+0x66>
 8001484:	b11d      	cbz	r5, 800148e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001486:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800148e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001490:	2b00      	cmp	r3, #0
 8001492:	d066      	beq.n	8001562 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001494:	0695      	lsls	r5, r2, #26
 8001496:	d504      	bpl.n	80014a2 <HAL_UART_IRQHandler+0x7a>
 8001498:	0688      	lsls	r0, r1, #26
 800149a:	d502      	bpl.n	80014a2 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff ff88 	bl	80013b2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80014a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80014a8:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80014aa:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80014ac:	d402      	bmi.n	80014b4 <HAL_UART_IRQHandler+0x8c>
 80014ae:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80014b2:	d01a      	beq.n	80014ea <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 80014b4:	f7ff fda0 	bl	8000ff8 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80014b8:	6823      	ldr	r3, [r4, #0]
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	0652      	lsls	r2, r2, #25
 80014be:	d510      	bpl.n	80014e2 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014c0:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80014c2:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80014c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014c8:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 80014ca:	b150      	cbz	r0, 80014e2 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <HAL_UART_IRQHandler+0x13c>)
 80014ce:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80014d0:	f7ff f8d9 	bl	8000686 <HAL_DMA_Abort_IT>
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d044      	beq.n	8001562 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80014d8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80014da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80014de:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80014e0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff ff9f 	bl	8001426 <HAL_UART_ErrorCallback>
 80014e8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80014ea:	f7ff ff9c 	bl	8001426 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ee:	63e5      	str	r5, [r4, #60]	; 0x3c
 80014f0:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80014f2:	0616      	lsls	r6, r2, #24
 80014f4:	d527      	bpl.n	8001546 <HAL_UART_IRQHandler+0x11e>
 80014f6:	060d      	lsls	r5, r1, #24
 80014f8:	d525      	bpl.n	8001546 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80014fa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80014fe:	2a21      	cmp	r2, #33	; 0x21
 8001500:	d12f      	bne.n	8001562 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001502:	68a2      	ldr	r2, [r4, #8]
 8001504:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001508:	6a22      	ldr	r2, [r4, #32]
 800150a:	d117      	bne.n	800153c <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800150c:	8811      	ldrh	r1, [r2, #0]
 800150e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001512:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001514:	6921      	ldr	r1, [r4, #16]
 8001516:	b979      	cbnz	r1, 8001538 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001518:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800151a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 800151c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800151e:	3a01      	subs	r2, #1
 8001520:	b292      	uxth	r2, r2
 8001522:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001524:	b9ea      	cbnz	r2, 8001562 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800152c:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800152e:	68da      	ldr	r2, [r3, #12]
 8001530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001538:	3201      	adds	r2, #1
 800153a:	e7ee      	b.n	800151a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800153c:	1c51      	adds	r1, r2, #1
 800153e:	6221      	str	r1, [r4, #32]
 8001540:	7812      	ldrb	r2, [r2, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	e7ea      	b.n	800151c <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001546:	0650      	lsls	r0, r2, #25
 8001548:	d50b      	bpl.n	8001562 <HAL_UART_IRQHandler+0x13a>
 800154a:	064a      	lsls	r2, r1, #25
 800154c:	d509      	bpl.n	8001562 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001554:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001556:	2320      	movs	r3, #32
 8001558:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff ff26 	bl	80013ae <HAL_UART_TxCpltCallback>
 8001562:	bd70      	pop	{r4, r5, r6, pc}
 8001564:	08001569 	.word	0x08001569

08001568 <UART_DMAAbortOnError>:
{
 8001568:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800156a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001570:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001572:	f7ff ff58 	bl	8001426 <HAL_UART_ErrorCallback>
 8001576:	bd08      	pop	{r3, pc}

08001578 <uart_int_init>:
        c = h->DR;
        mon_rx_interrupt(c); // rotina que irá receber o byte lido
    }
}
void uart_int_init(void)
{
 8001578:	b508      	push	{r3, lr}
    // enabling interrupts for errors
    //   (Frame error, noise error, overrun error)
	huart3.Instance->CR3 |= USART_CR3_EIE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <uart_int_init+0x30>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	695a      	ldr	r2, [r3, #20]
 8001580:	f042 0201 	orr.w	r2, r2, #1
 8001584:	615a      	str	r2, [r3, #20]
    // enabling interrupt for parity errors and rx
	huart3.Instance->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800158c:	60da      	str	r2, [r3, #12]

    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800158e:	2101      	movs	r1, #1
 8001590:	2200      	movs	r2, #0
 8001592:	2027      	movs	r0, #39	; 0x27
 8001594:	f7ff f802 	bl	800059c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001598:	2027      	movs	r0, #39	; 0x27
 800159a:	f7ff f833 	bl	8000604 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_ClearPendingIRQ(USART3_IRQn);
 800159e:	2027      	movs	r0, #39	; 0x27
}
 80015a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_ClearPendingIRQ(USART3_IRQn);
 80015a4:	f7ff b850 	b.w	8000648 <HAL_NVIC_ClearPendingIRQ>
 80015a8:	20000104 	.word	0x20000104

080015ac <app_init>:

void app_init(void)
{
 80015ac:	b508      	push	{r3, lr}
	util_cbuf_init(&cb,area,CB_MAX_SIZE);
 80015ae:	2264      	movs	r2, #100	; 0x64
 80015b0:	4903      	ldr	r1, [pc, #12]	; (80015c0 <app_init+0x14>)
 80015b2:	4804      	ldr	r0, [pc, #16]	; (80015c4 <app_init+0x18>)
 80015b4:	f000 faf6 	bl	8001ba4 <util_cbuf_init>
	uart_int_init();
}
 80015b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_int_init();
 80015bc:	f7ff bfdc 	b.w	8001578 <uart_int_init>
 80015c0:	2000003c 	.word	0x2000003c
 80015c4:	2000002c 	.word	0x2000002c

080015c8 <tratar_comando>:

uint8_t bot = 0;
uint32_t deb;

void tratar_comando(void)
{
 80015c8:	b530      	push	{r4, r5, lr}
	uint8_t teste[12]=   {'C','o','d','i','g','o',' ','t','e','s','t','e'};
 80015ca:	4b83      	ldr	r3, [pc, #524]	; (80017d8 <tratar_comando+0x210>)
	uint8_t butoff[10] = {'b','o','t','a','o',' ','l','o','w'};
	uint8_t c;
	int i = 0;
	uint8_t vet[10];

	while(util_cbuf_get(&cb,&c) == UTIL_CBUF_OK)
 80015cc:	4d83      	ldr	r5, [pc, #524]	; (80017dc <tratar_comando+0x214>)
	uint8_t teste[12]=   {'C','o','d','i','g','o',' ','t','e','s','t','e'};
 80015ce:	6818      	ldr	r0, [r3, #0]
 80015d0:	6859      	ldr	r1, [r3, #4]
{
 80015d2:	b091      	sub	sp, #68	; 0x44
	uint8_t teste[12]=   {'C','o','d','i','g','o',' ','t','e','s','t','e'};
 80015d4:	aa0d      	add	r2, sp, #52	; 0x34
 80015d6:	c203      	stmia	r2!, {r0, r1}
	uint8_t help[11]=    {'C','o','d','i','g','o',' ','h','e','l','p'};
 80015d8:	461c      	mov	r4, r3
	uint8_t teste[12]=   {'C','o','d','i','g','o',' ','t','e','s','t','e'};
 80015da:	6898      	ldr	r0, [r3, #8]
 80015dc:	6010      	str	r0, [r2, #0]
	uint8_t help[11]=    {'C','o','d','i','g','o',' ','h','e','l','p'};
 80015de:	f854 0f0c 	ldr.w	r0, [r4, #12]!
 80015e2:	6861      	ldr	r1, [r4, #4]
 80015e4:	aa0a      	add	r2, sp, #40	; 0x28
 80015e6:	c203      	stmia	r2!, {r0, r1}
 80015e8:	8920      	ldrh	r0, [r4, #8]
 80015ea:	8010      	strh	r0, [r2, #0]
	uint8_t buton[10] =  {'b','o','t','a','o',' ','h','i','g','h'};
 80015ec:	f853 0f17 	ldr.w	r0, [r3, #23]!
	uint8_t help[11]=    {'C','o','d','i','g','o',' ','h','e','l','p'};
 80015f0:	7aa1      	ldrb	r1, [r4, #10]
 80015f2:	7091      	strb	r1, [r2, #2]
	uint8_t buton[10] =  {'b','o','t','a','o',' ','h','i','g','h'};
 80015f4:	6859      	ldr	r1, [r3, #4]
 80015f6:	891b      	ldrh	r3, [r3, #8]
 80015f8:	aa01      	add	r2, sp, #4
 80015fa:	c203      	stmia	r2!, {r0, r1}
 80015fc:	8013      	strh	r3, [r2, #0]
	uint8_t butoff[10] = {'b','o','t','a','o',' ','l','o','w'};
 80015fe:	2300      	movs	r3, #0
 8001600:	2274      	movs	r2, #116	; 0x74
 8001602:	f8ad 3018 	strh.w	r3, [sp, #24]
 8001606:	f88d 2012 	strb.w	r2, [sp, #18]
 800160a:	2362      	movs	r3, #98	; 0x62
 800160c:	2261      	movs	r2, #97	; 0x61
 800160e:	f88d 3010 	strb.w	r3, [sp, #16]
 8001612:	f88d 2013 	strb.w	r2, [sp, #19]
 8001616:	236f      	movs	r3, #111	; 0x6f
 8001618:	2220      	movs	r2, #32
 800161a:	f88d 3011 	strb.w	r3, [sp, #17]
 800161e:	f88d 3014 	strb.w	r3, [sp, #20]
 8001622:	f88d 2015 	strb.w	r2, [sp, #21]
 8001626:	f88d 3017 	strb.w	r3, [sp, #23]
 800162a:	226c      	movs	r2, #108	; 0x6c
 800162c:	2377      	movs	r3, #119	; 0x77
 800162e:	f88d 2016 	strb.w	r2, [sp, #22]
 8001632:	f88d 3018 	strb.w	r3, [sp, #24]
 8001636:	f10d 041b 	add.w	r4, sp, #27
	while(util_cbuf_get(&cb,&c) == UTIL_CBUF_OK)
 800163a:	f10d 0103 	add.w	r1, sp, #3
 800163e:	4628      	mov	r0, r5
 8001640:	f000 fab7 	bl	8001bb2 <util_cbuf_get>
 8001644:	b368      	cbz	r0, 80016a2 <tratar_comando+0xda>
		vet[i]= c;
		i++;
	}

	//RECONHECENDO OS LEDS 1,2,3 E 4
	if ((vet[0] == 'l') & (vet[1]== 'e') & (vet[2] == 'd') & (vet[3]=='1'))
 8001646:	f89d 501d 	ldrb.w	r5, [sp, #29]
 800164a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800164e:	f89d 001e 	ldrb.w	r0, [sp, #30]
 8001652:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8001656:	f1a5 0c65 	sub.w	ip, r5, #101	; 0x65
 800165a:	f1dc 0300 	rsbs	r3, ip, #0
 800165e:	eb43 030c 	adc.w	r3, r3, ip
 8001662:	2c6c      	cmp	r4, #108	; 0x6c
 8001664:	bf14      	ite	ne
 8001666:	2200      	movne	r2, #0
 8001668:	f003 0201 	andeq.w	r2, r3, #1
 800166c:	2864      	cmp	r0, #100	; 0x64
 800166e:	bf14      	ite	ne
 8001670:	2200      	movne	r2, #0
 8001672:	f002 0201 	andeq.w	r2, r2, #1
 8001676:	2931      	cmp	r1, #49	; 0x31
 8001678:	d125      	bne.n	80016c6 <tratar_comando+0xfe>
 800167a:	b322      	cbz	r2, 80016c6 <tratar_comando+0xfe>
		{
			if((vet[4]=='o') & (vet[5]=='n'))
 800167c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001680:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8001684:	f1a3 046f 	sub.w	r4, r3, #111	; 0x6f
 8001688:	4263      	negs	r3, r4
 800168a:	4163      	adcs	r3, r4
 800168c:	2a6e      	cmp	r2, #110	; 0x6e
 800168e:	d10d      	bne.n	80016ac <tratar_comando+0xe4>
 8001690:	b163      	cbz	r3, 80016ac <tratar_comando+0xe4>
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 8001692:	2201      	movs	r2, #1
			}
			else if((vet[4]=='o') & (vet[5]=='f') & (vet[6]=='f'))
			{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,0);
 8001694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
			{
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,1);
			}
			else if((vet[4]=='o') & (vet[5]=='f') & (vet[6]=='f'))
			{
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
 8001698:	4851      	ldr	r0, [pc, #324]	; (80017e0 <tratar_comando+0x218>)
 800169a:	f7ff f8ed 	bl	8000878 <HAL_GPIO_WritePin>





}
 800169e:	b011      	add	sp, #68	; 0x44
 80016a0:	bd30      	pop	{r4, r5, pc}
		vet[i]= c;
 80016a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80016a6:	f804 3f01 	strb.w	r3, [r4, #1]!
 80016aa:	e7c6      	b.n	800163a <tratar_comando+0x72>
			else if((vet[4]=='o') & (vet[5]=='f') & (vet[6]=='f'))
 80016ac:	2a66      	cmp	r2, #102	; 0x66
 80016ae:	bf14      	ite	ne
 80016b0:	2300      	movne	r3, #0
 80016b2:	f003 0301 	andeq.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f1      	beq.n	800169e <tratar_comando+0xd6>
 80016ba:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80016be:	2b66      	cmp	r3, #102	; 0x66
 80016c0:	d1ed      	bne.n	800169e <tratar_comando+0xd6>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	e7e6      	b.n	8001694 <tratar_comando+0xcc>
		else if ((vet[0] == 'l') & (vet[1]== 'e') & (vet[2] == 'd') & (vet[3]=='2'))
 80016c6:	2932      	cmp	r1, #50	; 0x32
 80016c8:	d11c      	bne.n	8001704 <tratar_comando+0x13c>
 80016ca:	b1da      	cbz	r2, 8001704 <tratar_comando+0x13c>
			if((vet[4]=='o') & (vet[5]=='n'))
 80016cc:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80016d0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80016d4:	f1a3 006f 	sub.w	r0, r3, #111	; 0x6f
 80016d8:	4243      	negs	r3, r0
 80016da:	4143      	adcs	r3, r0
 80016dc:	2a6e      	cmp	r2, #110	; 0x6e
 80016de:	d104      	bne.n	80016ea <tratar_comando+0x122>
 80016e0:	b11b      	cbz	r3, 80016ea <tratar_comando+0x122>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,1);
 80016e2:	2201      	movs	r2, #1
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
 80016e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e8:	e7d6      	b.n	8001698 <tratar_comando+0xd0>
			else if((vet[4]=='o') & (vet[5]=='f') & (vet[6]=='f'))
 80016ea:	2a66      	cmp	r2, #102	; 0x66
 80016ec:	bf14      	ite	ne
 80016ee:	2300      	movne	r3, #0
 80016f0:	f003 0301 	andeq.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0d2      	beq.n	800169e <tratar_comando+0xd6>
 80016f8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80016fc:	2b66      	cmp	r3, #102	; 0x66
 80016fe:	d1ce      	bne.n	800169e <tratar_comando+0xd6>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
 8001700:	2200      	movs	r2, #0
 8001702:	e7ef      	b.n	80016e4 <tratar_comando+0x11c>
		else if ((vet[0] == 'l') & (vet[1]== 'e') & (vet[2] == 'd') & (vet[3]=='3'))
 8001704:	2933      	cmp	r1, #51	; 0x33
 8001706:	d11c      	bne.n	8001742 <tratar_comando+0x17a>
 8001708:	b1da      	cbz	r2, 8001742 <tratar_comando+0x17a>
			if((vet[4]=='o') & (vet[5]=='n'))
 800170a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800170e:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8001712:	f1a3 016f 	sub.w	r1, r3, #111	; 0x6f
 8001716:	424b      	negs	r3, r1
 8001718:	414b      	adcs	r3, r1
 800171a:	2a6e      	cmp	r2, #110	; 0x6e
 800171c:	d104      	bne.n	8001728 <tratar_comando+0x160>
 800171e:	b11b      	cbz	r3, 8001728 <tratar_comando+0x160>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,1);
 8001720:	2201      	movs	r2, #1
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
 8001722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001726:	e7b7      	b.n	8001698 <tratar_comando+0xd0>
			else if((vet[4]=='o') & (vet[5]=='f') & (vet[6]=='f'))
 8001728:	2a66      	cmp	r2, #102	; 0x66
 800172a:	bf14      	ite	ne
 800172c:	2300      	movne	r3, #0
 800172e:	f003 0301 	andeq.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0b3      	beq.n	800169e <tratar_comando+0xd6>
 8001736:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 800173a:	2b66      	cmp	r3, #102	; 0x66
 800173c:	d1af      	bne.n	800169e <tratar_comando+0xd6>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin,0);
 800173e:	2200      	movs	r2, #0
 8001740:	e7ef      	b.n	8001722 <tratar_comando+0x15a>
		else if((vet[0] == 'l') & (vet[1]== 'e') & (vet[2] == 'd') & (vet[3]=='4'))
 8001742:	2934      	cmp	r1, #52	; 0x34
 8001744:	d11c      	bne.n	8001780 <tratar_comando+0x1b8>
 8001746:	b1da      	cbz	r2, 8001780 <tratar_comando+0x1b8>
			if((vet[4]=='o') & (vet[5]=='n'))
 8001748:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800174c:	f1a3 026f 	sub.w	r2, r3, #111	; 0x6f
 8001750:	4253      	negs	r3, r2
 8001752:	4153      	adcs	r3, r2
 8001754:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 8001758:	2a6e      	cmp	r2, #110	; 0x6e
 800175a:	d104      	bne.n	8001766 <tratar_comando+0x19e>
 800175c:	b11b      	cbz	r3, 8001766 <tratar_comando+0x19e>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,1);
 800175e:	2201      	movs	r2, #1
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
 8001760:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001764:	e798      	b.n	8001698 <tratar_comando+0xd0>
			else if((vet[4]=='o') & (vet[5]=='f') & (vet[6]=='f'))
 8001766:	2a66      	cmp	r2, #102	; 0x66
 8001768:	bf14      	ite	ne
 800176a:	2300      	movne	r3, #0
 800176c:	f003 0301 	andeq.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d094      	beq.n	800169e <tratar_comando+0xd6>
 8001774:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8001778:	2b66      	cmp	r3, #102	; 0x66
 800177a:	d190      	bne.n	800169e <tratar_comando+0xd6>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,0);
 800177c:	2200      	movs	r2, #0
 800177e:	e7ef      	b.n	8001760 <tratar_comando+0x198>
			if ((vet[0] == 'h') & (vet[1]== 'e') & (vet[2] == 'l') & (vet[3]=='p'))
 8001780:	2c68      	cmp	r4, #104	; 0x68
 8001782:	bf14      	ite	ne
 8001784:	2300      	movne	r3, #0
 8001786:	f003 0301 	andeq.w	r3, r3, #1
 800178a:	286c      	cmp	r0, #108	; 0x6c
 800178c:	bf14      	ite	ne
 800178e:	2300      	movne	r3, #0
 8001790:	f003 0301 	andeq.w	r3, r3, #1
 8001794:	b143      	cbz	r3, 80017a8 <tratar_comando+0x1e0>
 8001796:	2970      	cmp	r1, #112	; 0x70
 8001798:	d106      	bne.n	80017a8 <tratar_comando+0x1e0>
				HAL_UART_Transmit(&huart3, help, 11, 200);
 800179a:	23c8      	movs	r3, #200	; 0xc8
 800179c:	220b      	movs	r2, #11
 800179e:	a90a      	add	r1, sp, #40	; 0x28
				HAL_UART_Transmit(&huart3, teste, 12, 200); // para mandar o help
 80017a0:	4810      	ldr	r0, [pc, #64]	; (80017e4 <tratar_comando+0x21c>)
 80017a2:	f7ff fda7 	bl	80012f4 <HAL_UART_Transmit>
}
 80017a6:	e77a      	b.n	800169e <tratar_comando+0xd6>
			else if((vet[0] == 'b') & (vet[1]== 'u') & (vet[2] == 't'))
 80017a8:	2c62      	cmp	r4, #98	; 0x62
 80017aa:	bf08      	it	eq
 80017ac:	2d75      	cmpeq	r5, #117	; 0x75
 80017ae:	d10e      	bne.n	80017ce <tratar_comando+0x206>
 80017b0:	2874      	cmp	r0, #116	; 0x74
 80017b2:	d10c      	bne.n	80017ce <tratar_comando+0x206>
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1)
 80017b4:	2101      	movs	r1, #1
 80017b6:	480c      	ldr	r0, [pc, #48]	; (80017e8 <tratar_comando+0x220>)
 80017b8:	f7ff f858 	bl	800086c <HAL_GPIO_ReadPin>
 80017bc:	2801      	cmp	r0, #1
					HAL_UART_Transmit(&huart3, buton, 9, 200);
 80017be:	f04f 03c8 	mov.w	r3, #200	; 0xc8
 80017c2:	f04f 0209 	mov.w	r2, #9
 80017c6:	bf0c      	ite	eq
 80017c8:	a901      	addeq	r1, sp, #4
					HAL_UART_Transmit(&huart3, butoff, 9, 200);
 80017ca:	a904      	addne	r1, sp, #16
 80017cc:	e7e8      	b.n	80017a0 <tratar_comando+0x1d8>
				HAL_UART_Transmit(&huart3, teste, 12, 200); // para mandar o help
 80017ce:	23c8      	movs	r3, #200	; 0xc8
 80017d0:	220c      	movs	r2, #12
 80017d2:	a90d      	add	r1, sp, #52	; 0x34
 80017d4:	e7e4      	b.n	80017a0 <tratar_comando+0x1d8>
 80017d6:	bf00      	nop
 80017d8:	08001cd0 	.word	0x08001cd0
 80017dc:	2000002c 	.word	0x2000002c
 80017e0:	40020c00 	.word	0x40020c00
 80017e4:	20000104 	.word	0x20000104
 80017e8:	40020000 	.word	0x40020000

080017ec <mon_rx_interrupt>:
	if (c == 32)
 80017ec:	2820      	cmp	r0, #32
{
 80017ee:	4601      	mov	r1, r0
	if (c == 32)
 80017f0:	d105      	bne.n	80017fe <mon_rx_interrupt+0x12>
		 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,1);
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <mon_rx_interrupt+0x20>)
 80017fa:	f7ff b83d 	b.w	8000878 <HAL_GPIO_WritePin>
	else if (c =='\n') // antes era else if
 80017fe:	280a      	cmp	r0, #10
 8001800:	d101      	bne.n	8001806 <mon_rx_interrupt+0x1a>
		tratar_comando();
 8001802:	f7ff bee1 	b.w	80015c8 <tratar_comando>
	else if(util_cbuf_put(&cb,c) == UTIL_CBUF_FULL)
 8001806:	4802      	ldr	r0, [pc, #8]	; (8001810 <mon_rx_interrupt+0x24>)
 8001808:	f000 b9ed 	b.w	8001be6 <util_cbuf_put>
 800180c:	40020c00 	.word	0x40020c00
 8001810:	2000002c 	.word	0x2000002c

08001814 <custom_uart3_irq>:
    USART_TypeDef *h = huart->Instance;
 8001814:	6803      	ldr	r3, [r0, #0]
    sr = h->SR;
 8001816:	681a      	ldr	r2, [r3, #0]
    while(sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE))
 8001818:	0711      	lsls	r1, r2, #28
 800181a:	d105      	bne.n	8001828 <custom_uart3_irq+0x14>
    if(sr & UART_FLAG_RXNE)
 800181c:	0692      	lsls	r2, r2, #26
 800181e:	d506      	bpl.n	800182e <custom_uart3_irq+0x1a>
        c = h->DR;
 8001820:	6858      	ldr	r0, [r3, #4]
        mon_rx_interrupt(c); // rotina que irá receber o byte lido
 8001822:	b2c0      	uxtb	r0, r0
 8001824:	f7ff bfe2 	b.w	80017ec <mon_rx_interrupt>
        sr = h->SR;
 8001828:	681a      	ldr	r2, [r3, #0]
        c = h->DR;
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	e7f4      	b.n	8001818 <custom_uart3_irq+0x4>
 800182e:	4770      	bx	lr

08001830 <app_loop>:
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001830:	bf30      	wfi
 8001832:	4770      	bx	lr

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b530      	push	{r4, r5, lr}
 8001836:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <SystemClock_Config+0xa4>)
 800183a:	2100      	movs	r1, #0
 800183c:	9101      	str	r1, [sp, #4]
 800183e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001840:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001844:	641a      	str	r2, [r3, #64]	; 0x40
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <SystemClock_Config+0xa8>)
 8001852:	9102      	str	r1, [sp, #8]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001866:	2301      	movs	r3, #1
 8001868:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800186a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800186e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001870:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001874:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001876:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001878:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLN = 168;
 800187c:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800187e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001880:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001882:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001884:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001886:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001888:	f7fe fffc 	bl	8000884 <HAL_RCC_OscConfig>
 800188c:	b100      	cbz	r0, 8001890 <SystemClock_Config+0x5c>
 800188e:	e7fe      	b.n	800188e <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001890:	230f      	movs	r3, #15
 8001892:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001894:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001898:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800189a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800189c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800189e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018a2:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a4:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018a6:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018a8:	f7ff f99c 	bl	8000be4 <HAL_RCC_ClockConfig>
 80018ac:	4605      	mov	r5, r0
 80018ae:	b100      	cbz	r0, 80018b2 <SystemClock_Config+0x7e>
 80018b0:	e7fe      	b.n	80018b0 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80018b2:	f7ff fa31 	bl	8000d18 <HAL_RCC_GetHCLKFreq>
 80018b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80018be:	f7fe fead 	bl	800061c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7fe fece 	bl	8000664 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80018c8:	462a      	mov	r2, r5
 80018ca:	4629      	mov	r1, r5
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7fe fe64 	bl	800059c <HAL_NVIC_SetPriority>
}
 80018d4:	b015      	add	sp, #84	; 0x54
 80018d6:	bd30      	pop	{r4, r5, pc}
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40007000 	.word	0x40007000

080018e0 <main>:
{
 80018e0:	b500      	push	{lr}
 80018e2:	b08b      	sub	sp, #44	; 0x2c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e4:	2400      	movs	r4, #0
  HAL_Init();
 80018e6:	f7fe fe1b 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 80018ea:	f7ff ffa3 	bl	8001834 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <main+0xec>)
 80018f0:	9401      	str	r4, [sp, #4]
 80018f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED_Pin, GPIO_PIN_RESET);
 80018f4:	4836      	ldr	r0, [pc, #216]	; (80019d0 <main+0xf0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018fa:	631a      	str	r2, [r3, #48]	; 0x30
 80018fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018fe:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001902:	9201      	str	r2, [sp, #4]
 8001904:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001906:	9402      	str	r4, [sp, #8]
 8001908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
 8001910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001912:	f002 0201 	and.w	r2, r2, #1
 8001916:	9202      	str	r2, [sp, #8]
 8001918:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800191a:	9403      	str	r4, [sp, #12]
 800191c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800191e:	f042 0208 	orr.w	r2, r2, #8
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
 8001924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001926:	f002 0208 	and.w	r2, r2, #8
 800192a:	9203      	str	r2, [sp, #12]
 800192c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	9404      	str	r4, [sp, #16]
 8001930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001932:	f042 0202 	orr.w	r2, r2, #2
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED_Pin, GPIO_PIN_RESET);
 800193e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001940:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED_Pin, GPIO_PIN_RESET);
 8001942:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001948:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED_Pin, GPIO_PIN_RESET);
 800194a:	f7fe ff95 	bl	8000878 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	a905      	add	r1, sp, #20
 8001950:	4820      	ldr	r0, [pc, #128]	; (80019d4 <main+0xf4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001952:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001954:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f7fe fea8 	bl	80006ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED_Pin;
 800195c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001960:	a905      	add	r1, sp, #20
 8001962:	481b      	ldr	r0, [pc, #108]	; (80019d0 <main+0xf0>)
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED_Pin;
 8001964:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001966:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196c:	f7fe fe9e 	bl	80006ac <HAL_GPIO_Init>
  huart3.Instance = USART3;
 8001970:	4819      	ldr	r0, [pc, #100]	; (80019d8 <main+0xf8>)
  huart3.Init.BaudRate = 115200;
 8001972:	491a      	ldr	r1, [pc, #104]	; (80019dc <main+0xfc>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001974:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8001976:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800197a:	e880 000a 	stmia.w	r0, {r1, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800197e:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001980:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001982:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001984:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800198a:	f7ff fc85 	bl	8001298 <HAL_UART_Init>
 800198e:	b100      	cbz	r0, 8001992 <main+0xb2>
 8001990:	e7fe      	b.n	8001990 <main+0xb0>
  htim7.Instance = TIM7;
 8001992:	4c13      	ldr	r4, [pc, #76]	; (80019e0 <main+0x100>)
  htim7.Init.Prescaler = 999;
 8001994:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <main+0x104>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001996:	60a0      	str	r0, [r4, #8]
  htim7.Init.Prescaler = 999;
 8001998:	f240 33e7 	movw	r3, #999	; 0x3e7
 800199c:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019a0:	4620      	mov	r0, r4
  htim7.Init.Period = 4199;
 80019a2:	f241 0367 	movw	r3, #4199	; 0x1067
 80019a6:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019a8:	f7ff fae8 	bl	8000f7c <HAL_TIM_Base_Init>
 80019ac:	b100      	cbz	r0, 80019b0 <main+0xd0>
 80019ae:	e7fe      	b.n	80019ae <main+0xce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b0:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019b4:	a905      	add	r1, sp, #20
 80019b6:	4620      	mov	r0, r4
 80019b8:	f7ff fafa 	bl	8000fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80019bc:	b100      	cbz	r0, 80019c0 <main+0xe0>
 80019be:	e7fe      	b.n	80019be <main+0xde>
  app_init();
 80019c0:	f7ff fdf4 	bl	80015ac <app_init>
	  app_loop();
 80019c4:	f7ff ff34 	bl	8001830 <app_loop>
 80019c8:	e7fc      	b.n	80019c4 <main+0xe4>
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40020000 	.word	0x40020000
 80019d8:	20000104 	.word	0x20000104
 80019dc:	40004800 	.word	0x40004800
 80019e0:	20000144 	.word	0x20000144
 80019e4:	40001400 	.word	0x40001400

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_MspInit+0x8c>)
 80019ec:	2400      	movs	r4, #0
 80019ee:	9400      	str	r4, [sp, #0]
 80019f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
 80019f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019fe:	9200      	str	r2, [sp, #0]
 8001a00:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	9401      	str	r4, [sp, #4]
 8001a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a0a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a14:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	f7fe fdae 	bl	8000578 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001a1c:	4622      	mov	r2, r4
 8001a1e:	4621      	mov	r1, r4
 8001a20:	f06f 000b 	mvn.w	r0, #11
 8001a24:	f7fe fdba 	bl	800059c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001a28:	4622      	mov	r2, r4
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	f06f 000a 	mvn.w	r0, #10
 8001a30:	f7fe fdb4 	bl	800059c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001a34:	4622      	mov	r2, r4
 8001a36:	4621      	mov	r1, r4
 8001a38:	f06f 0009 	mvn.w	r0, #9
 8001a3c:	f7fe fdae 	bl	800059c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001a40:	4622      	mov	r2, r4
 8001a42:	4621      	mov	r1, r4
 8001a44:	f06f 0004 	mvn.w	r0, #4
 8001a48:	f7fe fda8 	bl	800059c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001a4c:	4622      	mov	r2, r4
 8001a4e:	4621      	mov	r1, r4
 8001a50:	f06f 0003 	mvn.w	r0, #3
 8001a54:	f7fe fda2 	bl	800059c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001a58:	4622      	mov	r2, r4
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	f06f 0001 	mvn.w	r0, #1
 8001a60:	f7fe fd9c 	bl	800059c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a64:	4622      	mov	r2, r4
 8001a66:	4621      	mov	r1, r4
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f7fe fd96 	bl	800059c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a70:	b002      	add	sp, #8
 8001a72:	bd10      	pop	{r4, pc}
 8001a74:	40023800 	.word	0x40023800

08001a78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a78:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM7)
 8001a7a:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <HAL_TIM_Base_MspInit+0x38>)
 8001a7c:	6802      	ldr	r2, [r0, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d113      	bne.n	8001aaa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a82:	2200      	movs	r2, #0
 8001a84:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 8001a88:	9201      	str	r2, [sp, #4]
 8001a8a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a8c:	f041 0120 	orr.w	r1, r1, #32
 8001a90:	6419      	str	r1, [r3, #64]	; 0x40
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f003 0320 	and.w	r3, r3, #32
 8001a98:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a9a:	2037      	movs	r0, #55	; 0x37
 8001a9c:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a9e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001aa0:	f7fe fd7c 	bl	800059c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001aa4:	2037      	movs	r0, #55	; 0x37
 8001aa6:	f7fe fdad 	bl	8000604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001aaa:	b003      	add	sp, #12
 8001aac:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ab0:	40001400 	.word	0x40001400

08001ab4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 8001ab6:	6802      	ldr	r2, [r0, #0]
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <HAL_UART_MspInit+0x58>)
 8001aba:	429a      	cmp	r2, r3
{
 8001abc:	b087      	sub	sp, #28
  if(huart->Instance==USART3)
 8001abe:	d123      	bne.n	8001b08 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ac0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	9500      	str	r5, [sp, #0]
 8001ac8:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aca:	4811      	ldr	r0, [pc, #68]	; (8001b10 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001acc:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8001ad0:	6419      	str	r1, [r3, #64]	; 0x40
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001adc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ae0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae8:	2401      	movs	r4, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aea:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aec:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aee:	2307      	movs	r3, #7
 8001af0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af2:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af4:	f7fe fdda 	bl	80006ac <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001af8:	2027      	movs	r0, #39	; 0x27
 8001afa:	462a      	mov	r2, r5
 8001afc:	4621      	mov	r1, r4
 8001afe:	f7fe fd4d 	bl	800059c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b02:	2027      	movs	r0, #39	; 0x27
 8001b04:	f7fe fd7e 	bl	8000604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b08:	b007      	add	sp, #28
 8001b0a:	bd30      	pop	{r4, r5, pc}
 8001b0c:	40004800 	.word	0x40004800
 8001b10:	40020c00 	.word	0x40020c00

08001b14 <NMI_Handler>:
 8001b14:	4770      	bx	lr

08001b16 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler>

08001b18 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001b18:	e7fe      	b.n	8001b18 <MemManage_Handler>

08001b1a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001b1a:	e7fe      	b.n	8001b1a <BusFault_Handler>

08001b1c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler>

08001b1e <SVC_Handler>:
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001b24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b26:	f7fe fd15 	bl	8000554 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001b2e:	f7fe bda6 	b.w	800067e <HAL_SYSTICK_IRQHandler>
	...

08001b34 <USART3_IRQHandler>:

/**
* @brief This function handles USART3 global interrupt.
*/
void USART3_IRQHandler(void)
{
 8001b34:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b36:	4c04      	ldr	r4, [pc, #16]	; (8001b48 <USART3_IRQHandler+0x14>)
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7ff fc75 	bl	8001428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
	custom_uart3_irq(&huart3);
 8001b3e:	4620      	mov	r0, r4
  /* USER CODE END USART3_IRQn 1 */
}
 8001b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	custom_uart3_irq(&huart3);
 8001b44:	f7ff be66 	b.w	8001814 <custom_uart3_irq>
 8001b48:	20000104 	.word	0x20000104

08001b4c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b4c:	4801      	ldr	r0, [pc, #4]	; (8001b54 <TIM7_IRQHandler+0x8>)
 8001b4e:	f7ff b90e 	b.w	8000d6e <HAL_TIM_IRQHandler>
 8001b52:	bf00      	nop
 8001b54:	20000144 	.word	0x20000144

08001b58 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b58:	490f      	ldr	r1, [pc, #60]	; (8001b98 <SystemInit+0x40>)
 8001b5a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <SystemInit+0x44>)
 8001b68:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b6a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001b6c:	f042 0201 	orr.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001b72:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001b7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <SystemInit+0x48>)
 8001b82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b8c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b92:	608b      	str	r3, [r1, #8]
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	24003010 	.word	0x24003010

08001ba4 <util_cbuf_init>:
}

*/

util_cbuf_status_t util_cbuf_init(util_cbuf_t *cb, util_cbuf_data_t *area, uint16_t size)
{
 8001ba4:	4603      	mov	r3, r0
	cb->buffer = area;
 8001ba6:	6041      	str	r1, [r0, #4]
	cb->size = size;
 8001ba8:	8102      	strh	r2, [r0, #8]
	cb->tail = cb->head = 0;
 8001baa:	2000      	movs	r0, #0
 8001bac:	8018      	strh	r0, [r3, #0]
 8001bae:	8058      	strh	r0, [r3, #2]

	return UTIL_CBUF_OK;
}
 8001bb0:	4770      	bx	lr

08001bb2 <util_cbuf_get>:
	return UTIL_CBUF_OK;
}

util_cbuf_status_t util_cbuf_get(util_cbuf_t *cb, util_cbuf_data_t *c)
{
	if(cb->tail == cb->head)
 8001bb2:	8842      	ldrh	r2, [r0, #2]
 8001bb4:	8803      	ldrh	r3, [r0, #0]
 8001bb6:	b292      	uxth	r2, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d011      	beq.n	8001be2 <util_cbuf_get+0x30>
		return UTIL_CBUF_EMPTY;

	*c = cb->buffer[cb->tail];
 8001bbe:	8843      	ldrh	r3, [r0, #2]
 8001bc0:	6842      	ldr	r2, [r0, #4]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	700b      	strb	r3, [r1, #0]
	cb->tail = UTIL_CBUF_INC(cb->tail,cb->size);
 8001bc8:	8843      	ldrh	r3, [r0, #2]
 8001bca:	8902      	ldrh	r2, [r0, #8]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	bfbd      	ittte	lt
 8001bd4:	8843      	ldrhlt	r3, [r0, #2]
 8001bd6:	3301      	addlt	r3, #1
 8001bd8:	b29b      	uxthlt	r3, r3
 8001bda:	2300      	movge	r3, #0
 8001bdc:	8043      	strh	r3, [r0, #2]
 8001bde:	2000      	movs	r0, #0
 8001be0:	4770      	bx	lr
		return UTIL_CBUF_EMPTY;
 8001be2:	2002      	movs	r0, #2

	return UTIL_CBUF_OK;
}
 8001be4:	4770      	bx	lr

08001be6 <util_cbuf_put>:

util_cbuf_status_t util_cbuf_put(util_cbuf_t *cb, util_cbuf_data_t c)
{
	uint16_t next_head = UTIL_CBUF_INC(cb->head,cb->size);
 8001be6:	8803      	ldrh	r3, [r0, #0]
 8001be8:	8902      	ldrh	r2, [r0, #8]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	bfb8      	it	lt
 8001bf2:	8803      	ldrhlt	r3, [r0, #0]

	if(next_head == cb->tail)
 8001bf4:	8842      	ldrh	r2, [r0, #2]
	uint16_t next_head = UTIL_CBUF_INC(cb->head,cb->size);
 8001bf6:	bfb8      	it	lt
 8001bf8:	3301      	addlt	r3, #1
	if(next_head == cb->tail)
 8001bfa:	b292      	uxth	r2, r2
	uint16_t next_head = UTIL_CBUF_INC(cb->head,cb->size);
 8001bfc:	bfb4      	ite	lt
 8001bfe:	b29b      	uxthlt	r3, r3
 8001c00:	2300      	movge	r3, #0
	if(next_head == cb->tail)
 8001c02:	4293      	cmp	r3, r2
		return UTIL_CBUF_FULL;

	cb->buffer[cb->head] = c;
 8001c04:	bf18      	it	ne
 8001c06:	8802      	ldrhne	r2, [r0, #0]
{
 8001c08:	b510      	push	{r4, lr}
	cb->buffer[cb->head] = c;
 8001c0a:	bf1f      	itttt	ne
 8001c0c:	b292      	uxthne	r2, r2
 8001c0e:	6844      	ldrne	r4, [r0, #4]
 8001c10:	54a1      	strbne	r1, [r4, r2]
	cb->head = next_head;
 8001c12:	8003      	strhne	r3, [r0, #0]

	return UTIL_CBUF_OK;
 8001c14:	bf14      	ite	ne
 8001c16:	2000      	movne	r0, #0
		return UTIL_CBUF_FULL;
 8001c18:	2001      	moveq	r0, #1
}
 8001c1a:	bd10      	pop	{r4, pc}

08001c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c22:	e003      	b.n	8001c2c <LoopCopyDataInit>

08001c24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c2a:	3104      	adds	r1, #4

08001c2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c2c:	480b      	ldr	r0, [pc, #44]	; (8001c5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c34:	d3f6      	bcc.n	8001c24 <CopyDataInit>
  ldr  r2, =_sbss
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c38:	e002      	b.n	8001c40 <LoopFillZerobss>

08001c3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c3c:	f842 3b04 	str.w	r3, [r2], #4

08001c40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c44:	d3f9      	bcc.n	8001c3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c46:	f7ff ff87 	bl	8001b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f000 f811 	bl	8001c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4e:	f7ff fe47 	bl	80018e0 <main>
  bx  lr    
 8001c52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c58:	08001d1c 	.word	0x08001d1c
  ldr  r0, =_sdata
 8001c5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c60:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001c64:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001c68:	20000180 	.word	0x20000180

08001c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <ADC_IRQHandler>
	...

08001c70 <__libc_init_array>:
 8001c70:	b570      	push	{r4, r5, r6, lr}
 8001c72:	4e0d      	ldr	r6, [pc, #52]	; (8001ca8 <__libc_init_array+0x38>)
 8001c74:	4c0d      	ldr	r4, [pc, #52]	; (8001cac <__libc_init_array+0x3c>)
 8001c76:	1ba4      	subs	r4, r4, r6
 8001c78:	10a4      	asrs	r4, r4, #2
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	42a5      	cmp	r5, r4
 8001c7e:	d109      	bne.n	8001c94 <__libc_init_array+0x24>
 8001c80:	4e0b      	ldr	r6, [pc, #44]	; (8001cb0 <__libc_init_array+0x40>)
 8001c82:	4c0c      	ldr	r4, [pc, #48]	; (8001cb4 <__libc_init_array+0x44>)
 8001c84:	f000 f818 	bl	8001cb8 <_init>
 8001c88:	1ba4      	subs	r4, r4, r6
 8001c8a:	10a4      	asrs	r4, r4, #2
 8001c8c:	2500      	movs	r5, #0
 8001c8e:	42a5      	cmp	r5, r4
 8001c90:	d105      	bne.n	8001c9e <__libc_init_array+0x2e>
 8001c92:	bd70      	pop	{r4, r5, r6, pc}
 8001c94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c98:	4798      	blx	r3
 8001c9a:	3501      	adds	r5, #1
 8001c9c:	e7ee      	b.n	8001c7c <__libc_init_array+0xc>
 8001c9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ca2:	4798      	blx	r3
 8001ca4:	3501      	adds	r5, #1
 8001ca6:	e7f2      	b.n	8001c8e <__libc_init_array+0x1e>
 8001ca8:	08001d14 	.word	0x08001d14
 8001cac:	08001d14 	.word	0x08001d14
 8001cb0:	08001d14 	.word	0x08001d14
 8001cb4:	08001d18 	.word	0x08001d18

08001cb8 <_init>:
 8001cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cba:	bf00      	nop
 8001cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cbe:	bc08      	pop	{r3}
 8001cc0:	469e      	mov	lr, r3
 8001cc2:	4770      	bx	lr

08001cc4 <_fini>:
 8001cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cc6:	bf00      	nop
 8001cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cca:	bc08      	pop	{r3}
 8001ccc:	469e      	mov	lr, r3
 8001cce:	4770      	bx	lr
